{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["onClose","overlayColor","overlayOpacity","zIndex","duration","size","overlayStyles","backgroundColor","opacity","drawerStyles","transitionDuration","top","left","transform","width","height","right","bottom","getDirectionStyle","direction","style","id","type","onChange","checked","open","role","htmlFor","App","React","useState","isOpen","setIsOpen","toggleDrawer","prevState","justifyContent","alignItems","display","onClick","padding","ReactDOM","render","document","getElementById"],"mappings":"4RA6DkC,gBAAU,EAAV,EAAU,KAAV,IAE9BA,eAF8B,MAEpB,aAFoB,EAAU,EAAV,EAAU,WAAV,EAAU,MAAV,IAK9BC,oBAL8B,MAAU,OAAV,MAM9BC,sBAN8B,MAAU,GAAV,MAO9BC,cAP8B,MAAU,IAAV,MAQ9BC,gBAR8B,MAAU,IAAV,EAAU,EAAV,EAAU,UAAV,IAU9BC,YAV8B,MAUvB,IAVuB,EAYxBC,EAAqC,CACvCC,gBAAiB,GAAF,OADwB,GAEvCC,QAAS,GAAF,OAFgC,GAGvCL,OAAQA,GAGNM,EAAY,yBACdN,OAAQA,EAD8B,EAEtCO,mBAAoB,GAAF,OAFoB,EAEpB,OAjEA,SAAC,EAAD,GAItB,UACI,WACI,MAAO,CACHC,IADG,EAEHC,KAFG,EAGHC,UAHG,2BAIHC,MAJG,EAKHC,OAAQ,SAEhB,YACI,MAAO,CACHJ,IADG,EAEHK,MAFG,EAGHH,UAHG,0BAIHC,MAJG,EAKHC,OAAQ,SAEhB,aACI,MAAO,CACHH,KADG,EAEHI,MAFG,EAGHC,OAHG,EAIHJ,UAJG,0BAKHC,MALG,OAMHC,OAAQV,GAEhB,UACI,MAAO,CACHO,KADG,EAEHI,MAFG,EAGHL,IAHG,EAIHE,UAJG,2BAKHC,MALG,OAMHC,OAAQV,GAGhB,QACI,UAyBDa,CAAkBC,EAHiB,IAInCC,GAGP,OACI,+BAAKC,GAAG,YACJ,iCACIC,KAAK,WACLD,GAAG,qBACHE,SAAUvB,EACVwB,QAASC,IAEb,+BACIC,KAAK,aACLL,GAAG,sBACHD,MAAOX,GAVf,GAcI,iCACIkB,QAAQ,qBACRN,GAAG,oBACHD,MAAOd,MCrERsB,G,MA9BH,WAAO,IAAD,EACcC,IAAMC,UAAS,GAD7B,mBACPC,EADO,KACCC,EADD,KAERC,EAAe,WACjBD,GAAU,SAACE,GAAD,OAAgBA,MAG9B,OACI,yBACId,MAAO,CACHe,eAAgB,SAChBC,WAAY,SACZtB,MAAO,OACPC,OAAQ,QACRsB,QAAS,SAGb,4BAAQC,QAASL,GAAjB,QACA,kBAAC,EAAD,CACIR,KAAMM,EACN/B,QAASiC,EACTd,UAAU,OACVd,KAAM,IACNe,MAAO,CAAEmB,QAAS,KAElB,gDCvBhBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.faa593f9.chunk.js","sourcesContent":["import * as React from 'react'\nimport './styles.scss'\n\ntype Props = {\n    open: boolean\n    onClose: () => void\n    direction: 'left' | 'right' | 'top' | 'bottom'\n    children?: React.ReactNode\n    duration?: number\n    overlayOpacity?: number\n    overlayColor?: String\n    style?: React.CSSProperties\n    zIndex?: number\n    size?: number\n}\n\nconst getDirectionStyle = (\n    dir: string,\n    size?: number,\n): {} | React.CSSProperties => {\n    switch (dir) {\n        case 'left':\n            return {\n                top: 0,\n                left: 0,\n                transform: 'translate3d(-100%, 0, 0)',\n                width: size,\n                height: '100vh',\n            }\n        case 'right':\n            return {\n                top: 0,\n                right: 0,\n                transform: 'translate3d(100%, 0, 0)',\n                width: size,\n                height: '100vh',\n            }\n        case 'bottom':\n            return {\n                left: 0,\n                right: 0,\n                bottom: 0,\n                transform: 'translate3d(0, 100%, 0)',\n                width: '100%',\n                height: size,\n            }\n        case 'top':\n            return {\n                left: 0,\n                right: 0,\n                top: 0,\n                transform: 'translate3d(0, -100%, 0)',\n                width: '100%',\n                height: size,\n            }\n\n        default:\n            return {}\n    }\n}\n\nconst EZDrawer: React.FC<Props> = function ({\n    open,\n    onClose = () => {},\n    children,\n    style,\n    overlayColor = '#000',\n    overlayOpacity = 0.4,\n    zIndex = 100,\n    duration = 500,\n    direction,\n    size = 250,\n}): JSX.Element {\n    const overlayStyles: React.CSSProperties = {\n        backgroundColor: `${overlayColor}`,\n        opacity: `${overlayOpacity}`,\n        zIndex: zIndex,\n    }\n\n    const drawerStyles: React.CSSProperties = {\n        zIndex: zIndex + 1,\n        transitionDuration: `${duration}ms`,\n        ...getDirectionStyle(direction, size),\n        ...style,\n    }\n\n    return (\n        <div id='EZDrawer'>\n            <input\n                type='checkbox'\n                id='EZDrawer__checkbox'\n                onChange={onClose}\n                checked={open}\n            />\n            <nav\n                role='navigation'\n                id='EZDrawer__container'\n                style={drawerStyles}\n            >\n                {children}\n            </nav>\n            <label\n                htmlFor='EZDrawer__checkbox'\n                id='EZDrawer__overlay'\n                style={overlayStyles}\n            />\n        </div>\n    )\n}\n\nexport default EZDrawer\n","import React from 'react'\n\nimport Drawer from 'react-modern-drawer'\nimport 'react-modern-drawer/dist/index.css'\n\nconst App = () => {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const toggleDrawer = () => {\n        setIsOpen((prevState) => !prevState)\n    }\n\n    return (\n        <div\n            style={{\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: '100%',\n                height: '100vh',\n                display: 'flex',\n            }}\n        >\n            <button onClick={toggleDrawer}>Show</button>\n            <Drawer\n                open={isOpen}\n                onClose={toggleDrawer}\n                direction='left'\n                size={300}\n                style={{ padding: 40 }}\n            >\n                <div>Hello World</div>\n            </Drawer>\n        </div>\n    )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}